#!/usr/bin/env python
# traduko.py
# Copyright (C) 2007 Phil Bordelon
# This file is part of Endgame: Singularity.

# Endgame: Singularity is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# Endgame: Singularity is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Endgame: Singularity; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# This file contains the 'traduko' utility, meant to ease translating strings
# for the game.


import ConfigParser
import optparse

def buildOptionParser():
    """
buildOptionParser() builds an 'optparse' object to handle traduko's myriad
arguments and options.  Unfortunately, optparse isn't really made for modal
applications like traduko, so we'll have to abuse the code a bit.  But it
should be good enough.
"""

    usage = """
    %prog MODE [options] trans_lang

traduko is an application for helping translations of Endgame: Singularity.
Using it is much like using a revision control system.  There are a number
of different modes, and each mode takes a set of options or other arguments
to properly run.

For each option, the modes in which it works are listed in brackets at the
end of the help text.

MODES

The various modes available for use with traduko are as follows:

    update [--source LANG] [--restart] trans_lang

The 'update' mode is for when you want to start a new translation, or pull
new strings to keep a translation updated.  It will always use the en_US
translation as the base (as that is the "source" translation), but if you
pass --source as a parameter it will override en_US strings with those from
another available language.  This is useful if you are translating into a
language that is a variant of an extant one.  --restart will create a new
language file for trans_lang, erasing any data already there.  THIS IS
DANGEROUS.

   verify trans_lang

This will do a verification pass on the language, informing you of which
strings still need to be translated, don't exist in the current language
file, and so on.

   package trans_lang

This will generate a nice .tar.gz file to send to the Endgame: Singularity
developers with your translation.

TRANSLATION FILES

The files are in a fairly basic file format.  Strings that are sourced from
en_US will be marked with three exclamation points at the beginning and end;
strings sourced from a different 'source' language will be marked with three
asterisks at the beginning and end.
"""

    parser = optparse.OptionParser(usage = usage)

    parser.add_option("-s", "--source", dest="source", default=None,
     help="Use language LANG as the source for the translation [update]",
     metavar="LANG")

    parser.add_option("--restart", dest="restart", default=False,
     action="store_true",
     help="Restart a language translation entirely (DANGEROUS!) [update]",)

    return parser

if "__main__" == __name__:

    option_parser = buildOptionParser()

    (options, args) = option_parser.parse_args()
    print repr (options), repr(args)
